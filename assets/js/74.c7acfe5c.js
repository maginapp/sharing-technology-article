(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{347:function(n,t,e){"use strict";e.r(t);var a=e(2),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"三大性质总结：原子性、可见性以及有序性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三大性质总结：原子性、可见性以及有序性"}},[n._v("#")]),n._v(" 三大性质总结：原子性、可见性以及有序性")]),n._v(" "),e("quote-info",{attrs:{title:"三大性质总结：原子性、可见性以及有序性",plat:"掘金",author:"你听___",link:"https://juejin.cn/post/6844903601530208270"}}),n._v(" "),e("p",[n._v("在并发编程中分析线程安全的问题时往往需要切入点，那就是"),e("strong",[n._v("两大核心")]),n._v("：JMM抽象内存模型以及happens-before规则（在"),e("a",{attrs:{href:"https://juejin.im/post/6844903600318054413",target:"_blank",rel:"noopener noreferrer"}},[n._v("这篇文章"),e("OutboundLink")],1),n._v("中已经经过了），三条性质："),e("strong",[n._v("原子性，有序性和可见性")]),n._v("。关于"),e("a",{attrs:{href:"https://juejin.im/post/6844903600334831629",target:"_blank",rel:"noopener noreferrer"}},[n._v("synchronized"),e("OutboundLink")],1),n._v("和"),e("a",{attrs:{href:"https://juejin.im/post/6844903601064640525",target:"_blank",rel:"noopener noreferrer"}},[n._v("volatile"),e("OutboundLink")],1),n._v("已经讨论过了，就想着将并发编程中这两大神器在 "),e("strong",[n._v("原子性，有序性和可见性")]),n._v("上做一个比较，当然这也是面试中的高频考点，值得注意。")]),n._v(" "),e("h2",{attrs:{id:"_2-原子性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-原子性"}},[n._v("#")]),n._v(" 2. 原子性")]),n._v(" "),e("p",[n._v("原子性是指"),e("strong",[n._v("一个操作是不可中断的，要么全部执行成功要么全部执行失败，有着“同生共死”的感觉")]),n._v("。及时在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰。我们先来看看哪些是原子操作，哪些不是原子操作，有一个直观的印象：")]),n._v(" "),e("blockquote",[e("p",[n._v("int a = 10; //1")]),n._v(" "),e("p",[n._v("a++; //2")]),n._v(" "),e("p",[n._v("int b=a; //3")]),n._v(" "),e("p",[n._v("a = a+1; //4")])]),n._v(" "),e("p",[n._v("上面这四个语句中只"),e("strong",[n._v("有第1个语句是原子操作")]),n._v("，将10赋值给线程工作内存的变量a,而语句2（a++），实际上包含了三个操作：1. 读取变量a的值；2：对a进行加一的操作；3.将计算后的值再赋值给变量a，而这三个操作无法构成原子操作。对语句3,4的分析同理可得这两条语句不具备原子性。当然，"),e("a",{attrs:{href:"https://juejin.im/post/6844903600318054413",target:"_blank",rel:"noopener noreferrer"}},[n._v("java内存模型"),e("OutboundLink")],1),n._v("中定义了8中操作都是原子的，不可再分的。")]),n._v(" "),e("ol",[e("li",[n._v("lock(锁定)：作用于主内存中的变量，它把一个变量标识为一个线程独占的状态；")]),n._v(" "),e("li",[n._v("unlock(解锁):作用于主内存中的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定")]),n._v(" "),e("li",[n._v("read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便后面的load动作使用；")]),n._v(" "),e("li",[n._v("load（载入）：作用于工作内存中的变量，它把read操作从主内存中得到的变量值放入工作内存中的变量副本")]),n._v(" "),e("li",[n._v("use（使用）：作用于工作内存中的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作；")]),n._v(" "),e("li",[n._v("assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作；")]),n._v(" "),e("li",[n._v("store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送给主内存中以便随后的write操作使用；")]),n._v(" "),e("li",[n._v("write（操作）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。")])]),n._v(" "),e("p",[n._v("上面的这些指令操作是相当底层的，可以作为扩展知识面掌握下。那么如何理解这些指令了?比如，把一个变量从主内存中复制到工作内存中就需要执行read,load操作，将工作内存同步到主内存中就需要执行store,write操作。注意的是："),e("strong",[n._v("java内存模型只是要求上述两个操作是顺序执行的并不是连续执行的")]),n._v("。也就是说read和load之间可以插入其他指令，store和writer可以插入其他指令。比如对主内存中的a,b进行访问就可以出现这样的操作顺序："),e("strong",[n._v("read a,read b, load b,load a")]),n._v("。")]),n._v(" "),e("p",[n._v("由原子性变量操作read,load,use,assign,store,write，可以"),e("strong",[n._v("大致认为基本数据类型的访问读写具备原子性")]),n._v("（例外就是long和double的非原子性协定）")]),n._v(" "),e("blockquote",[e("p",[n._v("synchronized")])]),n._v(" "),e("p",[n._v("上面一共有八条原子操作，其中六条可以满足基本数据类型的访问读写具备原子性，还剩下lock和unlock两条原子操作。如果我们需要更大范围的原子性操作就可以使用lock和unlock原子操作。尽管jvm没有把lock和unlock开放给我们使用，但jvm以更高层次的指令monitorenter和monitorexit指令开放给我们使用，反应到java代码中就是---synchronized关键字，也就是说"),e("strong",[n._v("synchronized满足原子性")]),n._v("。")]),n._v(" "),e("blockquote",[e("p",[n._v("volatile 我们先来看这样一个例子：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class VolatileExample {\n    private static volatile int counter = 0;\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            Thread thread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    for (int i = 0; i < 10000; i++)\n                        counter++;\n                }\n            });\n            thread.start();\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(counter);\n    }\n}\n复制代码\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])]),e("p",[n._v("开启10个线程，每个线程都自加10000次，如果不出现线程安全的问题最终的结果应该就是：10*10000 = 100000;可是运行多次都是小于100000的结果，问题在于 "),e("strong",[n._v("volatile并不能保证原子性")]),n._v("，在前面说过counter++这并不是一个原子操作，包含了三个步骤：1.读取变量counter的值；2.对counter加一；3.将新值赋值给变量counter。如果线程A读取counter到工作内存后，其他线程对这个值已经做了自增操作后，那么线程A的这个值自然而然就是一个过期的值，因此，总结果必然会是小于100000的。")]),n._v(" "),e("p",[n._v("如果让volatile保证原子性，必须符合以下两条规则：")]),n._v(" "),e("ol",[e("li",[e("strong",[n._v("运算结果并不依赖于变量的当前值，或者能够确保只有一个线程修改变量的值；")])]),n._v(" "),e("li",[e("strong",[n._v("变量不需要与其他的状态变量共同参与不变约束")])])]),n._v(" "),e("h2",{attrs:{id:"_3-有序性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-有序性"}},[n._v("#")]),n._v(" 3. 有序性")]),n._v(" "),e("blockquote",[e("p",[n._v("synchronized")])]),n._v(" "),e("p",[n._v("synchronized语义表示锁在同一时刻只能由一个线程进行获取，当锁被占用后，其他线程只能等待。因此，synchronized语义就要求线程在访问读写共享变量时只能“串行”执行，因此"),e("strong",[n._v("synchronized具有有序性")]),n._v("。")]),n._v(" "),e("blockquote",[e("p",[n._v("volatile")])]),n._v(" "),e("p",[n._v("在java内存模型中说过，为了性能优化，编译器和处理器会进行指令重排序；也就是说java程序天然的有序性可以总结为："),e("strong",[n._v("如果在本线程内观察，所有的操作都是有序的；如果在一个线程观察另一个线程，所有的操作都是无序的")]),n._v("。在单例模式的实现上有一种双重检验锁定的方式（Double-checked Locking）。代码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Singleton {\n    private Singleton() { }\n    private volatile static Singleton instance;\n    public Singleton getInstance(){\n        if(instance==null){\n            synchronized (Singleton.class){\n                if(instance==null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n复制代码\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("这里为什么要加volatile了？我们先来分析一下不加volatile的情况，有问题的语句是这条：")]),n._v(" "),e("blockquote",[e("p",[n._v("instance = new Singleton();")])]),n._v(" "),e("p",[n._v("这条语句实际上包含了三个操作：1.分配对象的内存空间；2.初始化对象；3.设置instance指向刚分配的内存地址。但由于存在重排序的问题，可能有以下的执行顺序：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://maginapp.github.io/static-website/images/sharing/backup/concurrent-properties-a-b.webp",alt:"不加volatile可能的执行时序"}})]),n._v(" "),e("p",[n._v("如果2和3进行了重排序的话，线程B进行判断if(instance==null)时就会为true，而实际上这个instance并没有初始化成功，显而易见对线程B来说之后的操作就会是错得。而"),e("strong",[n._v("用volatile修饰")]),n._v("的话就可以禁止2和3操作重排序，从而避免这种情况。"),e("strong",[n._v("volatile包含禁止指令重排序的语义，其具有有序性")]),n._v("。")]),n._v(" "),e("h2",{attrs:{id:"_4-可见性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-可见性"}},[n._v("#")]),n._v(" 4. 可见性")]),n._v(" "),e("p",[n._v("可见性是指当一个线程修改了共享变量后，其他线程能够立即得知这个修改。通过之前对"),e("a",{attrs:{href:"https://juejin.im/post/6844903600334831629",target:"_blank",rel:"noopener noreferrer"}},[n._v("synchronzed"),e("OutboundLink")],1),n._v("内存语义进行了分析，当线程获取锁时会从主内存中获取共享变量的最新值，释放锁的时候会将共享变量同步到主内存中。从而，"),e("strong",[n._v("synchronized具有可见性")]),n._v("。同样的在"),e("a",{attrs:{href:"https://juejin.im/post/6844903601064640525",target:"_blank",rel:"noopener noreferrer"}},[n._v("volatile分析中"),e("OutboundLink")],1),n._v("，会通过在指令中添加"),e("strong",[n._v("lock指令")]),n._v("，以实现内存可见性。因此, "),e("strong",[n._v("volatile具有可见性")])]),n._v(" "),e("h2",{attrs:{id:"_5-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[n._v("#")]),n._v(" 5. 总结")]),n._v(" "),e("p",[n._v("通过这篇文章，主要是比较了synchronized和volatile在三条性质：原子性，可见性，以及有序性的情况，归纳如下：")]),n._v(" "),e("blockquote",[e("p",[e("strong",[n._v("synchronized: 具有原子性，有序性和可见性")]),n._v("； "),e("strong",[n._v("volatile：具有有序性和可见性")])])]),n._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[n._v("#")]),n._v(" 参考文献")]),n._v(" "),e("p",[n._v("《java并发编程的艺术》")]),n._v(" "),e("p",[n._v("《深入理解java虚拟机》")])],1)}),[],!1,null,null,null);t.default=s.exports}}]);